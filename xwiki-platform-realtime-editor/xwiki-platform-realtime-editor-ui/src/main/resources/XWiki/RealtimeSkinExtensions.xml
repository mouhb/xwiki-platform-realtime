<?xml version="1.0" encoding="UTF-8"?>
<xwikidoc>
<web>XWiki</web>
<name>RealtimeSkinExtensions</name>
<language></language>
<defaultLanguage></defaultLanguage>
<translation>0</translation>
<parent>XWiki.WebHome</parent>
<creator>xwiki:XWiki.Admin</creator>
<author>xwiki:XWiki.Admin</author>
<customClass></customClass>
<contentAuthor>xwiki:XWiki.Admin</contentAuthor>
<creationDate>1350442625000</creationDate>
<date>1350442738000</date>
<contentUpdateDate>1350442738000</contentUpdateDate>
<version>1.1</version>
<title></title>
<template></template>
<defaultTemplate></defaultTemplate>
<validationScript></validationScript>
<comment></comment>
<minorEdit>false</minorEdit>
<syntaxId>xwiki/2.1</syntaxId>
<hidden>false</hidden>
<object>
<class>
<name>XWiki.JavaScriptExtension</name>
<customClass></customClass>
<customMapping></customMapping>
<defaultViewSheet></defaultViewSheet>
<defaultEditSheet></defaultEditSheet>
<defaultWeb></defaultWeb>
<nameField></nameField>
<validationScript></validationScript>
<cache>
<cache>0</cache>
<disabled>0</disabled>
<displayType>select</displayType>
<multiSelect>0</multiSelect>
<name>cache</name>
<number>5</number>
<prettyName>Caching policy</prettyName>
<relationalStorage>0</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>1</size>
<unmodifiable>0</unmodifiable>
<values>long|short|default|forbid</values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</cache>
<code>
<disabled>0</disabled>
<name>code</name>
<number>2</number>
<prettyName>Code</prettyName>
<rows>20</rows>
<size>50</size>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
</code>
<name>
<disabled>0</disabled>
<name>name</name>
<number>1</number>
<prettyName>Name</prettyName>
<size>30</size>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.StringClass</classType>
</name>
<parse>
<disabled>0</disabled>
<displayFormType>select</displayFormType>
<displayType>yesno</displayType>
<name>parse</name>
<number>4</number>
<prettyName>Parse content</prettyName>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
</parse>
<use>
<cache>0</cache>
<disabled>0</disabled>
<displayType>select</displayType>
<multiSelect>0</multiSelect>
<name>use</name>
<number>3</number>
<prettyName>Use this extension</prettyName>
<relationalStorage>0</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>1</size>
<unmodifiable>0</unmodifiable>
<values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</use>
</class>
<name>XWiki.RealtimeSkinExtensions</name>
<number>0</number>
<className>XWiki.JavaScriptExtension</className>
<guid>09c7a17c-fb8a-402b-99cf-30e2c9e82211</guid>
<property>
<cache>long</cache>
</property>
<property>
<code>
/**
 * XWiki's custom RT editor controller.
 * Usage: \$xwiki.jsfx.use("path/to/XWikiRt.js", {'forceSkinAction': true, 'lazy': false})
 *
 * @type object
 * @param lazy {@code true} if you want to load the RT code on demand, {@code false} if you want to load the
 *            RT code when the page is loaded
 */
var Rt =
{
    /**
     * Indicates the state of the RT GWT module. Possible values are: 0 (uninitialized), 1 (loading), 2 (loaded).
     */
    readyState: 0,

    /**
     * The queue of functions to execute after the RT module is loaded.
     */
    onModuleLoadQueue: [],

    /**
     * All the RT editor instances, mapped to their hookId.
     */
    instances: {},

    /**
     * Loads the RT JS code on demand(which is Rt.onModuleLoad() ).
     */
    load : function() {
        // Test if the code has been already loaded.
        // GWT loads the RT code in an in-line frame with the 'com.xpn.xwiki.wysiwyg.Wysiwyg' id.
        if (document.getElementById('xre') || this.readyState != 0) {
            return;
        }

        // Start loading the RT GWT module.
        this.readyState = 1;

        // Create the script tag to be used for importing the GWT script loader.
        var script = document.createElement('script');
        script.type = 'text/javascript';
        script.src = '$xwiki.getDocument("XWiki.RealtimeAttachments").getAttachmentURL("xre.nocache.js")';

        // The default GWT script loader calls document.write() twice which prevents us from loading the WYSIWYG code
        // on demand, after the document has been loaded. To overcome this we have to overwrite the document.write()
        // method before the GWT script loader is executed and restore it after.
        // NOTE: The GWT script loader uses document.write() to compute the URL from where it is loaded.
        var counter = 0;
        var limit = 2;
        var oldWrite = document.write;
        var newWrite = function(html) {
            if (counter &lt; limit) {
                counter++;
                // Try to wrap onScriptLoad in order to be notified when the WYSIWYG script is loaded.
                Rt.maybeHookOnScriptLoad();
                // Fail silently if the script element hasn't been attached to the document.
                if (!script.parentNode) {
                    return;
                }
                // Create a DIV and put the HTML inside.
                var div = document.createElement('div');
                // We have to replace all the script tags because otherwise IE drops them.
                div.innerHTML = html.replace(/&lt;script\b([\s\S]*?)&lt;\/script&gt;/gi, "&lt;pre script=\"script\"$1&lt;/pre&gt;");
                // Move DIV contents after the GWT script loader.
                var nextSibling = script.nextSibling;
                while (div.firstChild) {
                    var child = div.firstChild;
                    // Recover the script tags.
                    if (child.nodeName.toLowerCase() == 'pre' &amp;&amp; child.getAttribute('script') == 'script') {
                        var pre = child;
                        pre.removeAttribute('script');
                        // Create the script tag.
                        child = document.createElement('script');
                        // Copy all the attributes.
                        for (var i = 0; i &lt; pre.attributes.length; i++) {
                            var attrNode = pre.attributes[i];
                            // In case of IE we have to copy only the specified attributes.
                            if (typeof attrNode.specified == 'undefined'
                                    || (typeof attrNode.specified == 'boolean' &amp;&amp; attrNode.specified)) {
                                child.setAttribute(attrNode.nodeName, attrNode.nodeValue);
                            }
                        }
                        // Copy the script text.
                        child.text = typeof pre.innerText == 'undefined' ? pre.textContent : pre.innerText;
                        // Don't forget to remove the placeholder.
                        div.removeChild(pre);
                    }
                    if (nextSibling) {
                        script.parentNode.insertBefore(child, nextSibling);
                    } else {
                        script.parentNode.appendChild(child);
                    }
                }
            }
            if (counter &gt;= limit) {
                document.write = oldWrite;
                oldWrite = undefined;
                script = undefined;
                counter = undefined;
            }
        }

        // Append the script tag to the head.
        var heads = document.getElementsByTagName('head');
        if (heads.length &gt; 0) {
            document.write = newWrite;
            heads[0].appendChild(script);
        }
    }
    ,

    /**
     * Schedules a function to be executed after the RT module is loaded.
     * A call to this method forces the RT
     * module to be loaded, unless the second parameter, {@code lazy}, is set to {@code true}.
     *
     * @param fCode a function
     * @param lazy {@code true} to prevent loading the WYSIWYG module at this point, {@code false} otherwise
     */
    onModuleLoad: function(fCode, lazy) {
        if (typeof fCode != 'function') {
            return;
        }
        switch (this.readyState) {
            // uninitialized
            case 0:
                if (!lazy) {
                    this.load();
                }
            // fall-through

            // loading
            case 1:
                this.onModuleLoadQueue.push(fCode);
                break;

            // loaded
            case 2:
                fCode();
                break;
        }
    },

    /**
     * Executes all the functions scheduled from on module load.
     */
    fireOnModuleLoad: function() {
        // The WYSIWYG module has been loaded successfully.
        this.readyState = 2;

        // Execute all the scheduled functions.
        for (var i = 0; i &lt; this.onModuleLoadQueue.length; i++) {
            this.onModuleLoadQueue[i]();
        }

        // There's no need to schedule functions anymore. They will be execute immediately.
        this.onModuleLoadQueue = undefined;
    },

    /**
     * Try to wrap onScriptLoad in order to be notified when the WYSIWYG script is loaded.
     */
    maybeHookOnScriptLoad: function() {
        if (xre &amp;&amp; xre.onScriptLoad)
        {
            var onScriptLoad = xre.onScriptLoad;
            xre.onScriptLoad = function() {
                Rt.hookGwtOnLoad();
                onScriptLoad();

                // Restore the default onScriptLoad function.
                if (xre &amp;&amp; xre.onScriptLoad)
                {
                    xre.onScriptLoad = onScriptLoad;
                }
                onScriptLoad = undefined;
            }

            // Prevent further calls to this method.
            this.maybeHookOnScriptLoad = function() {};
        }
    },

    /**
     * Wrap gwtOnLoad in order to be notified when the WYSIWYG module is loaded.
     */
    hookGwtOnLoad: function() {
        var iframe = document.getElementById('xre');

        ## Need to get a URL for calling the GWT RPC call and pass it to the RT editor.
        iframe.contentWindow.getModuleBaseURL = function() {
            ## This is not very nice looking but it's not very fragile as the URL scheme is higly stable.
            return "$doc.getExternalURL('gwt').replaceAll('/bin/gwt/.*', '/gwt/')";
        };

        var gwtOnLoad = iframe.contentWindow.gwtOnLoad;
        iframe.contentWindow.gwtOnLoad = function(errFn, modName, modBase) {
            gwtOnLoad(function() {
                Rt.fireOnModuleLoad = function() {
                };
                if (typeof errFn == 'function') {
                    errFn();
                }
            }, modName, modBase);
            Rt.fireOnModuleLoad();

            // Restore the default gwtOnLoad function.
            iframe.contentWindow.gwtOnLoad = gwtOnLoad;
            iframe = undefined;
            gwtOnLoad = undefined;
        }

        // Prevent further calls to this method.
        this.hookGwtOnLoad = function() {};
    },

    /**
     * @return the RT editor instance associated with the given hookId
     */
    getInstance: function(hookId) {
        return this.instances[hookId];
    }
};
</code>
</property>
<property>
<name>Realtime Editor Javascript</name>
</property>
<property>
<parse>1</parse>
</property>
<property>
<use>always</use>
</property>
</object>
<object>
<class>
<name>XWiki.JavaScriptExtension</name>
<customClass></customClass>
<customMapping></customMapping>
<defaultViewSheet></defaultViewSheet>
<defaultEditSheet></defaultEditSheet>
<defaultWeb></defaultWeb>
<nameField></nameField>
<validationScript></validationScript>
<cache>
<cache>0</cache>
<disabled>0</disabled>
<displayType>select</displayType>
<multiSelect>0</multiSelect>
<name>cache</name>
<number>5</number>
<prettyName>Caching policy</prettyName>
<relationalStorage>0</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>1</size>
<unmodifiable>0</unmodifiable>
<values>long|short|default|forbid</values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</cache>
<code>
<disabled>0</disabled>
<name>code</name>
<number>2</number>
<prettyName>Code</prettyName>
<rows>20</rows>
<size>50</size>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
</code>
<name>
<disabled>0</disabled>
<name>name</name>
<number>1</number>
<prettyName>Name</prettyName>
<size>30</size>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.StringClass</classType>
</name>
<parse>
<disabled>0</disabled>
<displayFormType>select</displayFormType>
<displayType>yesno</displayType>
<name>parse</name>
<number>4</number>
<prettyName>Parse content</prettyName>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
</parse>
<use>
<cache>0</cache>
<disabled>0</disabled>
<displayType>select</displayType>
<multiSelect>0</multiSelect>
<name>use</name>
<number>3</number>
<prettyName>Use this extension</prettyName>
<relationalStorage>0</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>1</size>
<unmodifiable>0</unmodifiable>
<values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</use>
</class>
<name>XWiki.RtSkinExtensions</name>
<number>1</number>
<className>XWiki.JavaScriptExtension</className>
<guid>8b0ceb62-c73b-4b1b-bbfb-e9be114b9a70</guid>
<property>
<cache>long</cache>
</property>
<property>
<code>(function(){
var msgRealTime = 'RealTime Wiki';

var addRealtimeMenuEntry = function() {
    var wikiLink = $('tmEditWiki');
    var wikiSpan = wikiLink.parentNode;
    var wikiHref = wikiLink.getAttribute("href") + "&amp;force=1#RealTime";
    var rt = new Element("span", {"class":"submenuitem"});
    var rtLink = new Element("a", {
        "href": wikiHref,
        "id": "tmEditRt",
        "class": "tmEditRt"
    });
    rtLink.update(msgRealTime);
    rt.appendChild(rtLink);

    if (XWiki.editor == 'wiki') {
        if (window.location.hash == '#RealTime') {
            XWiki.editor = 'realtime-wiki';
            var link = $("tmCurrentEditor").down("a");
            link.setAttribute("href", wikiHref);
            link.update("&lt;strong&gt; " + msgRealTime + "&lt;/strong&gt;");
        }
    }
    wikiSpan.insert({'after': rt});
};

var isRealtimeMode = function() {
    return (window.location.hash == '#RealTime');
};

var copyContentToField = function() {
    $("contentToSave").setAttribute("value", window.editor.getContent());
};

var startRtWiki = function() {
    Rt.onModuleLoad(function() {
        var docId = JSON.stringify([XWiki.currentWiki, XWiki.currentSpace, XWiki.currentPage, XWiki.docvariant]);
        new RtApi({documentId: docId, textAreaId: 'content', toReplaceId: 'xwikieditcontent' });

        // Remove the keyboard shortcuts because they will be hit while typing.
        for (var sc in shortcut.all_shortcuts) {
            shortcut.remove(sc);
        }
    });

    // Remove preview button and autosave control.
    $$("[name=action_preview]")[0].remove();
    $("autosaveControl").remove();

    var contentField = new Element("input", {
        "id": "contentToSave",
        "name": "content",
        "type": "hidden",
        "value": $("content").value
    });
    $$("[name=xredirect]")[0].insert({"after": contentField});

    // Use mouseover so the content is updated before the button can be pressed.
    Event.observe($$("[name='action_saveandcontinue']")[0], "mouseover", copyContentToField);
    Event.observe($$("[name='action_save']")[0], "mouseover", copyContentToField);

    Rt.load();
};

document.observe("xwiki:dom:loaded", function() {
    addRealtimeMenuEntry();
    if (isRealtimeMode()) {
        startRtWiki();
    }
});

})();</code>
</property>
<property>
<name>Realtime Editor Injector</name>
</property>
<property>
<parse>0</parse>
</property>
<property>
<use>always</use>
</property>
</object>
<object>
<class>
<name>XWiki.StyleSheetExtension</name>
<customClass></customClass>
<customMapping></customMapping>
<defaultViewSheet></defaultViewSheet>
<defaultEditSheet></defaultEditSheet>
<defaultWeb></defaultWeb>
<nameField></nameField>
<validationScript></validationScript>
<cache>
<cache>0</cache>
<disabled>0</disabled>
<displayType>select</displayType>
<multiSelect>0</multiSelect>
<name>cache</name>
<number>5</number>
<prettyName>Caching policy</prettyName>
<relationalStorage>0</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>1</size>
<unmodifiable>0</unmodifiable>
<values>long|short|default|forbid</values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</cache>
<code>
<disabled>0</disabled>
<name>code</name>
<number>2</number>
<prettyName>Code</prettyName>
<rows>20</rows>
<size>50</size>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
</code>
<name>
<disabled>0</disabled>
<name>name</name>
<number>1</number>
<prettyName>Name</prettyName>
<size>30</size>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.StringClass</classType>
</name>
<parse>
<disabled>0</disabled>
<displayFormType>select</displayFormType>
<displayType>yesno</displayType>
<name>parse</name>
<number>4</number>
<prettyName>Parse content</prettyName>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
</parse>
<use>
<cache>0</cache>
<disabled>0</disabled>
<displayType>select</displayType>
<multiSelect>0</multiSelect>
<name>use</name>
<number>3</number>
<prettyName>Use this extension</prettyName>
<relationalStorage>0</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>1</size>
<unmodifiable>0</unmodifiable>
<values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</use>
</class>
<name>XWiki.RtSkinExtensions</name>
<number>0</number>
<className>XWiki.StyleSheetExtension</className>
<guid>4ceb0eed-7361-481f-9806-b3473555e294</guid>
<property>
<cache>long</cache>
</property>
<property>
<code>.actionmenu .tmEditRt {
  background-image: url("$xwiki.getSkinFile('icons/silk/page_white_gear.gif')");
}</code>
</property>
<property>
<name>Realtime Editor CSS</name>
</property>
<property>
<parse>1</parse>
</property>
<property>
<use>always</use>
</property>
</object>
<content>{{info}}This document contains a Javascript Skin Extension which is used by the Realtime Editor.{{/info}}</content></xwikidoc>
